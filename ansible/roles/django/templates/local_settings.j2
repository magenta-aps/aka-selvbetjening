import os

ALLOWED_HOSTS = ['*']

DATABASES = {
{% for database, settings in django_databases.items() %}
    '{{ database }}': {
    {% for key, value in settings.items() %}
        "{{ key|upper }}": "{{ value }}",
    {% endfor %}
    }
{% endfor %}
}

PRISME_CONNECT = {
    'wsdl_file': '{{django_prisme.service}}',
    'auth': {
        'basic': {
            'username': '{{django_prisme.username}}',
            'domain': 'codmz.local',
            'password': '{{django_prisme.password}}'
        }
    },
    {{django_prisme.extra}}
}

DAFO_CONNECT = {
    'pitu-server': '10.240.76.4',
    'pitu-certificate': '{{django_dafo.pitu_server_certificate}}',
    'client-certificate': '{{django_dafo.client_certificate}}',
    'private-key': '{{django_dafo.private_key}}',
    'pitu-client': 'PITU/GOV/AKA/AKA_Selvbetjening',
    'pitu-service': {
        'cpr': 'PITU/GOV/DIA/magenta_services/DAFO-PRISME-CPR-COMBINED/v1',
        'cvr': 'PITU/GOV/DIA/magenta_services/DAFO-PRISME-CVR-COMBINED/v1',
        'cprcvr': 'PITU/GOV/DIA/magenta_services/DAFO-CVR-OWNED-BY/v1',
    },
}

OPENID_CONNECT = {
    'enabled': {{django_openid.enabled|default('False')}},
    'issuer': '{{django_openid.issuer|default('""')}}',  # top level url to the issuer, used for autodiscovery
    'scope': '{{django_openid.scope|default('""')}}',  # openid is mandatory to indicated is is a openid OP, we need to use digitalimik to get the cpr/cvr number.
    'client_id': '{{django_openid.client_id|default('""')}}',  # id of the system (ouath), registered at headnet
    'client_certificate': '{{django_openid.client_certificate|default('""')}}',  # path to client certificate used to secure the communication between the system and OP
    'private_key': '{{django_openid.private_key|default('""')}}',  # used for signing messages passed to the OP
    'redirect_uri': '{{django_openid.redirect_uri|default('""')}}',  # url registered at headnet to redirect the user to after a successfull login at OP
    'logout_uri': '{{django_openid.logout_uri|default('""')}}',  # url registered at headnet to call when logging out, removing session data there
    'front_channel_logout_uri': '{{django_openid.front_channel_logout_uri|default('""')}}',  # url registered at headnet to call when logging out, should clear our cookies etc.
    'post_logout_redirect_uri': '{{django_openid.post_logout_redirect_uri|default('""')}}'  # url registered at headnet to redirect to when logout is complete
}

NEMID_CONNECT = {
    'enabled': {{django_nemid.enabled|default('False')}},
    'federation_service': '{{django_nemid.federation_service|default('""')}}',
    'cookie_name': '{{django_nemid.cookie_name|default('""')}}',
    'cookie_path': '{{django_nemid.cookie_path|default('""')}}',
    'cookie_domain': '{{django_nemid.cookie_domain|default('""')}}',
    'login_url': '{{django_nemid.login_url|default('""')}}',
    'redirect_field': '{{django_nemid.redirect_field|default('""')}}',
    'client_certificate': '{{django_nemid.client_certificate|default('""')}}',
    'private_key': '{{django_nemid.private_key|default('""')}}',
    'get_user_service': '{{django_nemid.get_user_service|default('""')}}',
}

MOUNTS = {
    'claimant_account_statements': {
        'maindir': os.path.join('media', '6.5'),
        'subdir': '{cvr}*',
        'files': '*'
    }
}


SECURE_SSL_REDIRECT = {{django_https}}

DEBUG = {{ debug }}

DEFAULT_CPR = {{django_default_cpr|default('None')}}
DEFAULT_CVR = {{django_default_cvr|default('None')}}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {  # A flag to only log specified in production
            '()': 'django.utils.log.RequireDebugFalse'
        },
        'require_debug_true': {  # A flag used for DEBUGGING only logs
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'verbose': {
            'format': '{name} {levelname} {asctime} {module} {funcName} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'encrypted': {
            'format': '\n%(asctime)s %(levelname)s %(name)s %(pathname)s:%(lineno)s    %(message)s',
            '()': 'aka.encrypted_logging.EncryptedLogFormatterFactory',
        },
        'unencrypted': {
            'format': '\n%(asctime)s %(levelname)s %(name)s %(pathname)s:%(lineno)s    %(message)s',
        },
    },
    'handlers': {
        'debug-console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': '{{django_log_dir}}/aka.log.asc',
            'when': 'D', # Roll log each day
            'formatter': 'encrypted',
            'encoding': 'UTF-8'
        },
        'unencrypted_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': '/var/log/aka/aka.log',
            'when': 'D',  # Roll log each day
            'formatter': 'unencrypted',
            'encoding': 'UTF-8'
        },
    },
    'loggers': {
        'zeep.transports': {
            'level': 'DEBUG',
            'propagate': False,
            'handlers': ['file'],
        },
        'aka.clients.prisme': {
            'level': 'DEBUG',
            'propagate': False,
            'handlers': ['file'],
        },
        'aka': {
            'handlers': ['debug-console', 'unencrypted_file'],
            'filters': ['require_debug_true'],
            'level': 'DEBUG'
        },
        'oic': {
            'handlers': ['debug-console'],
            'filters': ['require_debug_true'],
            'level': 'DEBUG'
        }
    }
}
