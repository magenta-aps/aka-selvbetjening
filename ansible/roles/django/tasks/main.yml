---

- name: Install system-level dependencies
  become: yes
  apt:
    update_cache: true
    name:
      - python3
      - python3-pip
      - python3-venv
      - python3-psycopg2
      - gettext
      - wkhtmltopdf
      - libxmlsec1-dev
      - language-pack-da
      - gpg

- name: Install requirements
  pip:
    requirements: "{{django_requirements_file}}"
    virtualenv: "{{django_virtual_env_path}}"
    virtualenv_python: "python{{python_major_version}}"
  when:
    - django_requirements_file is defined
    - django_requirements_file != none

- name: Generate secret key
  shell: ". {{django_virtual_env_path}}/bin/activate && python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'"
  register: secret_key
  tags:
    - django

- name: Install django secret key
  copy:
    content: "SECRET_KEY = '{{secret_key.stdout}}'"
    dest: "{{django_secret_key_file}}"
    force: no  # Very important - do not overwrite if it does not exist

- name: Setup django local settings
  template:
    src: templates/local_settings.j2
    dest: "{{django_local_settings_file}}"
    force: yes

- name: Create log dir
  file:
    path: "{{django_log_dir}}"
    state: directory
    owner: "{{django_log_owner}}"
    group: "{{django_log_group}}"
    mode: 0775
    recurse: yes

- name: Create log file
  file:
    path: "{{django_log_dir}}/aka.log.asc"
    state: touch
    owner: "{{django_log_owner}}"
    group: "{{django_log_group}}"
    mode: 0775

- name: Migrate
  shell: ". {{django_virtual_env_path}}/bin/activate && python {{django_manage_file}} migrate"
  tags:
    - django

- name: Collect static files
  shell: ". {{django_virtual_env_path}}/bin/activate && python {{django_manage_file}} collectstatic --no-input"

- name: Compile messages
  shell: ". {{django_virtual_env_path}}/bin/activate && cd {{project_dir}} && python {{django_manage_file}} compilemessages"

- name: Restart apache
  service:
    name: apache2
    state: restarted
    enabled: yes
  when: restart_apache == true

- name: Create gpg dir for webuser
  file:
    path: "{{webuser_homedir}}/.gnupg"
    state: directory
    owner: "{{webuser}}"
    group: "{{webuser}}"
    mode: 0700

# - name: Import public encryption key
- name: Import public encryption key
  become_user: "{{webuser}}"
  shell:
    cmd: "gpg --import"
    stdin: "{{gpg.pubkey}}"

- name: Setup session clearance as a CRON job
  cron:
    job: "{{django_virtual_env_path}}/bin/activate && {{django_manage_file}} clearsessions && deactivate"
    name: "AKA session cache clear"
    hour: 2
    minute: 0

# Touch logfile
...
