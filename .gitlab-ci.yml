stages:
  - lint
  - build
  - test
  - release
  - configure
  - deploy

include:
  - project: 'labs/salt-automation'
    file:
      - '/gitlab-ci-templates/common/rules.v1.yml'
      - '/gitlab-ci-templates/common/saltbert.v1.yml'
      - '/gitlab-ci-templates/common/config-updater-meta.v1.yml'

variables:
  # Project variables
  RELEASE_REGISTRY: docker.io
  #RELEASE_REGISTRY_IMAGE: index.docker.io/magentaaps/kas
  IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
  IMAGE_DEV: ${CI_REGISTRY_IMAGE}:dev
  IMAGE_TAG: magentaaps/aka-selvbetjening:${CI_COMMIT_TAG}


# Lint stage
#############
.lint-default: &lint-default
  stage: lint
  needs: []
  image: python:3.6
  tags:
    - docker

Lint python:
  <<: *lint-default
  before_script:
    - pip3 install flake8
    - pip3 install black
  script:
    - flake8 --ignore E501,E226,E203,W503 backend/
    - black --check --diff backend/

Lint Dockerfiles:
  <<: *lint-default
  image: hadolint/hadolint:latest-debian
  before_script:
    - apt-get -y update
    - apt-get -y install --no-install-recommends git
  script:
    - git ls-files --exclude='Dockerfile*' --ignored | xargs --max-lines=1 hadolint

Lint REUSE compliance:
  extends: .lint-default
  image:
    name: fsfe/reuse:latest
    entrypoint: [""]
  script:
    - reuse lint

# Build stage
#############
Build selvbetjening:
  stage: build
  needs: []
  dependencies: []
  image:
    name: gcr.io/kaniko-project/executor:debug-v0.16.0
    entrypoint: [""]
  tags:
    - docker
  script:
    # Login to GitLab registry
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile
      --destination=${IMAGE_SHA}

# Test stage
.test-default: &test-default
  stage: test
  dependencies: []
  tags:
    - docker

Selvbetjening Unittest:
  <<: *test-default
  needs: ["Build selvbetjening"]
  image: ${IMAGE_SHA}
  services:
    - name: postgres:13
      alias: db
  variables:
    POSTGRES_USER: selvbetjening
    POSTGRES_PASSWORD: selvbetjening
    POSTGRES_DB: selvbetjening
    POSTGRES_HOST: db
    DJANGO_TIMEZONE: Europe/Copenhagen
    DJANGO_SECRET_KEY: zuvd9h*iw+hhefxld(bqq*^7_ksk0(jy^1*fe=b_7(9p*=hn5$
    SKIP_MIGRATIONS: "true"
    DJANGO_LANGUAGE_COOKIE_DOMAIN: "localhost"

    SAML_ENABLED: "true"
    SAML_SP_ENTITY_ID: http://localhost:8000/saml/metadata/
    SAML_SP_LOGIN_CALLBACK_URI: http://localhost:8000/login/callback
    SAML_SP_LOGOUT_CALLBACK_URI: http://localhost:8000/logout/callback/
    SAML_SP_CERTIFICATE: /ssl/sp/selfsigned.crt
    SAML_SP_KEY: /ssl/sp/selfsigned.key
    SAML_IDP_ENTITY_ID: http://localhost:8888/simplesaml/saml2/idp/metadata.php
    SAML_IDP_LOGIN_URI: http://localhost:8888/simplesaml/saml2/idp/SSOService.php
    SAML_IDP_LOGOUT_URI: http://localhost:8888/simplesaml/saml2/idp/SingleLogoutService.php
    SAML_IDP_CERTIFICATE: /ssl/idp/selfsigned.crt
    SAML_IDP_METADATA: http://localhost:8888/simplesaml/saml2/idp/metadata.php
    SAML_CONTACT_TECHNICAL_NAME: Tester
    SAML_CONTACT_TECHNICAL_EMAIL: test@example.com
    SAML_CONTACT_SUPPORT_NAME: Tester
    SAML_CONTACT_SUPPORT_EMAIL: test@example.com

  before_script:
    - pip3 install -r backend/requirements.txt
  script:
    - cd backend
    - coverage run --source='.' --omit=manage.py,project/wsgi.py,*/admin.py manage.py test
    - coverage report
    - coverage xml
  coverage: '/^TOTAL.+?(\d+\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: /backend/coverage.xml
  allow_failure: false

# Release stage
###############

.release-default:
  stage: release
  image: alpine
  needs: ["Selvbetjening Unittest"]
  dependencies: []
  tags:
    - docker
  before_script:
    # install skopeo
    - apk add skopeo

Release dev image:
  extends:
    - .release-default
  only:
    refs:
      - master
      - 50806_mitid
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      "docker://${IMAGE_SHA}"
      "docker://${IMAGE_DEV}"

Release production image:
  extends:
    - .rules:semver-all
    - .release-default
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_SHA}"
      "docker://${IMAGE_TAG}"

# Configure stage
#################

# We roll master out to test, so no need to update config
#Configure test:
#  stage: configure
#  extends:
#    - .rules:semver-all
#    - .config:endpoint-with-tag
#  needs: ["Release test image"]
#  variables:
#    # Matches routing in config-updater/config_updater/akap/main.py in salt repo
#    ENDPOINT: akap/salt/update-test

Configure production:
  stage: configure
  extends:
    - .rules:semver-core
    - .config:endpoint-with-tag
  needs: ["Release production image"]
  variables:
    # Matches routing in config-updater/config_updater/akap/main.py in salt repo
    ENDPOINT: akap/salt/update-production


# Deploy stage
##############

Deploy test:
  stage: deploy
  when: manual
  only:
    refs:
      - master
  extends:
    - .saltbert
  variables:
    SALTBERT_ORCHESTRATION: aka_selvbetjening.service-test
    SALTBERT_URL: https://ctrldev1.magenta-aps.dk
  environment:
    name: test
    url: "https://test.akap.sullissivik.gl"

Deploy production:
  stage: deploy
  when: manual
  extends:
    - .rules:semver-core
    - .saltbert
  needs: ["Release production image", "Configure production"]
  variables:
    SALTBERT_ORCHESTRATION: aka_selvbetjening.service-prod
    SALTBERT_URL: https://ctrl1.magenta-aps.dk
  environment:
    name: production
    url: "https://akap.sullissivik.gl"
